var http = require("http");
var assert = require("assert");

exports.sequence = function (tests) {
    if (typeof (tests) !== "object" || typeof (tests.length) !== "number") {
        throw "sequence function requires an array of tests as a parameter";
    }

    var current = 0;
    var next = function () {
        if (tests.length > current++) {
            tests[current - 1](next);
        }
    }

    next();
};

exports.getAddress = function (scheme, path) {
    return scheme
        + '://'
        + (process.env.IISNODETEST_HOST || 'localhost')
        + ':'
        + (process.env.IISNODETEST_PORT || 31415)
        + path;
};

function request(timeout, path, message, verb, expectedStatusCode, expectedBody, expectedHeaders)
{
    return function (next) {
        var options = {
            host: process.env.IISNODETEST_HOST || "localhost",
            port: process.env.IISNODETEST_PORT || 31415,
            method: verb,
            path: path
        };

        var body;
        if (message && typeof message === "object") {
            body = message.body;
            options.headers = message.headers || {};
        }
        else {
            body = message;
            options.headers = {};
        }

        if (body) {
            if (!message.chunked) {
                options.headers["Content-Length"] = body.length;
            }
        }
        else if (verb === "POST" || verb === "PUT") {
            options.headers["Content-Length"] = 0;
        }

        console.log("request options: " + JSON.stringify(options));

        var request = null;

        var timerId = setTimeout(function () {
            request.abort();
            assert.ok(false, "request timed out");
        }, timeout);

        request = http.request(options, function (res) {
            console.log("response status: " + res.statusCode);
            console.log("response headers: " + JSON.stringify(res.headers));

            if (expectedStatusCode && res.statusCode !== expectedStatusCode)
                clearTimeout(timerId);

            if (expectedStatusCode)
                try {
                    assert.equal(res.statusCode, expectedStatusCode, "response status code matches the expected response status code");
                } catch (e) {
                    console.error(e);
                    process.exit();
                }

            res.setEncoding("utf8");
            var body = "";
            res.on("data", function (chunk) {
                console.log("response body chunk: " + chunk);
                body += chunk;
            });
            res.on("end", function () {
                console.log("end of response");
                clearTimeout(timerId);
                if (expectedBody)
                    try {
                        if (typeof expectedBody === 'function') {
                            expectedBody(body);
                        }
                        else {
                            assert.equal(body, expectedBody, "response body matches the expected response body");
                        }
                    } catch (e) {
                        console.error(e);
                        process.exit();
                    }

                if (expectedHeaders) {
                    try {
                        if (typeof expectedHeaders === 'function') {
                            expectedHeaders(res);
                        }
                        else {
                            for (var h in expectedHeaders) {
                                assert.equal(res.headers[h], expectedHeaders[h], "response header matches the expected response header");
                            }
                        }
                    } catch (e) {
                        console.error(e);
                        process.exit();
                    }
                }

                if (next)
                    next();
            });
        });

        request.on("error", function (e) {
            console.log("problem with request: " + e.message);
            clearTimeout(timerId);
            assert.ok(false, "response finished successfully");
        });

        if (body)
            request.write(body);

        request.end();
    }
}

exports.post = function (timeout, path, message, expectedStatusCode, expectedBody, expectedHeaders) {
    return request(timeout, path, message, "POST", expectedStatusCode, expectedBody, expectedHeaders);
}

exports.get = function (timeout, path, expectedStatusCode, expectedBody, expectedHeaders) {
    return request(timeout, path, null, "GET", expectedStatusCode, expectedBody, expectedHeaders);
}

exports.wait = function (timeout) {
    return function(next) {
        console.log("starting wait for " + timeout + " milliseconds...");
        setTimeout(function() { console.log("wait finished."); next(); }, timeout);
    }
}